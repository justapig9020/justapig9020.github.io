{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1603008363855},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1603008363855},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1603008363855},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1603008363855},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1603008363855},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1603008363855},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1603008363855},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1603008363855},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1603008363855},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1603008363855},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1603008363855},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1603008363855},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1603008363855},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1603008363855},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1603008363855},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1603008363855},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1603008363855},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1603008363855},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1603008363855},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1603008363855},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1603008363855},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1603008363855},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1603008363855},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1603008363855},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1603008363855},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1603008363855},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1603008363859},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1603008363855},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1603008363855},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1603008363855},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1603008363855},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1603008363855},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1603008363855},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1603008363855},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1603008363855},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1603008363855},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1603008363855},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1603008363855},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1603008363855},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1603008363855},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1603008363855},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1603008363855},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1603008363855},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1603008363859},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1603008363859},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1603008363859},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1603008363859},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1603008363859},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1603008363859},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1603008363859},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1603008363859},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1603008363859},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1603008363859},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1603008363859},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1603008363859},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1603008363859},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1603008363855},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1603008363855},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1603008363855},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1603008363855},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1603008363855},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1603008363855},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1603008363859},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1603008363859},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1603008363859},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1603008363859},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1603008363859},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1603008363859},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1603008363859},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1603008363859},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1603008363859},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1603008363859},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1603008363859},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1603008363859},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1603008363859},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1603008363859},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1603008363859},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1603008363859},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1603008363859},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1603008363859},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1603008363859},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1603008363859},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1603008363859},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1603008363859},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1603008363859},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1603008363859},{"_id":"public/2020/10/18/hello-world/index.html","hash":"8f060213dc25db48e0e01dff46175f7281726d00","modified":1603206047919},{"_id":"public/archives/index.html","hash":"529708d8c957b34da9533f765d48ed134fab6d0a","modified":1603626321980},{"_id":"public/archives/2020/index.html","hash":"ba66e6cd7c8dbb5157e64b43ef6045085e31e71b","modified":1603626321980},{"_id":"public/archives/2020/10/index.html","hash":"8719ff48505e8d9ec3eda30724b9819833bca164","modified":1603626321980},{"_id":"public/index.html","hash":"1ddff575b27871424b0dd5284a2dc7c76c71b613","modified":1603626454382},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1603031313950},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1603031313950},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1603031313950},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1603031313950},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1603031313950},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1603031313950},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1603031313950},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1603031313950},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1603031313950},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1603031313950},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1603031313950},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1603031313950},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1603031313950},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1603031313950},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1603031313950},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1603031313950},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1603031313950},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1603031313950},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1603031313950},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1603031313950},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1603031313950},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1603031313950},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1603031313950},{"_id":"source/_posts/linux-pipe-1.md","hash":"247b2015c669c4b011040caeef7e0d1213519348","modified":1603207562701},{"_id":"public/tags/Linux/index.html","hash":"4f1463c62b6792a194adbf3c8e0e2c336afb480d","modified":1603626321980},{"_id":"public/2020/10/20/linux-pipe-1/index.html","hash":"61be5ed3906f8c242ac9471dd6955aa6751882df","modified":1603626321980},{"_id":"source/_posts/whoami.md","hash":"3bbe687139850133d6f24b49e7ce8e9de2560bc6","modified":1603206966984},{"_id":"public/2020/10/20/whoami/index.html","hash":"b838e4ecf54b83e46001df91e6109d63f4bec0c6","modified":1603626321980},{"_id":"source/_posts/linux-pipe-2.md","hash":"d991ece367060aace7c3a6bcd3b8792607f0ca3c","modified":1603378063166},{"_id":"public/2020/10/22/linux-pipe-2/index.html","hash":"67a5a59c70023db20bc5aff09704a2115e2b3f2f","modified":1603626321980},{"_id":"source/_posts/LDM.md","hash":"ea9a29d43644ec6322640fb23982fb52510e5a3e","modified":1603626449893},{"_id":"public/2020/10/25/LDM/index.html","hash":"7cd1586bfcd77fbc34389426f791e202d5309c36","modified":1603626454382},{"_id":"public/tags/aarch64/index.html","hash":"ce654e43e75f1f4c51261ced593639820b1d2e21","modified":1603626321980}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"linux pipe 筆記(一)","date":"2020-10-20T14:56:28.000Z","_content":"## 前言\n以下紀錄近期 trace linux kernel module `pipe` 的一些筆記與心得。\n## 緣起\n有朋友在進行關於 `pipe` 的實驗，原始碼如下:\n```c=\nint main(){\n    char *arg1[] = {\"ls\", NULL};\n    char *arg2[] = {\"cat\",\"-n\", NULL};\n    int p[2];\n    if(pipe(p))\n        return 0;\n\n    for(int i = 0; i < 2; i++){\n        pid_t pid;\n        pid = fork();\n        if(pid == 0){\n            if(i == 0){\n                close(p[0]);\n                dup2(p[1], 1);\n                execvp(arg1[0], arg1);\n                close(p[1]);\n                exit(0);\n            }else if(i == 1){\n                close(p[1]);\n                dup2(p[0], 0);\n\n                execvp(arg2[0], arg2);\n                close(p[0]);\n                exit(0);\n            }\n        }else{\n            int status;\n            waitpid(pid, &status, 0);\n        }\n    }\n}\n```\n\n預期的功能如下：\n```bash\n$ ls | cat -n\n```\n預期輸出(該資料夾中有 `main.c` 與 `main` 兩個檔案的狀況下):\n```bash\n$\n     1\tmain\n     2\tmain.c\n$\n```\n\n可是卻發生 `cat` 無法終止的問題 (輸出完預期的字串後，一直停留在 `cat` 中不會停止)。\n實際輸出:\n```bash\n$\n     1\tmain\n     2\tmain.c\n```\n\n首先，來了解上述實作涉及的函式。\n## System calls\n### dup2\n```c\nint dup2(int oldfd, int newfd);\n```\n**System call** `dup` 會複製給定的 `file descriptor` 並返回複製後的 `file descriptor` 。而 `dup2` 則可以指定要複製的 `file descriptor` 。換句話說 `dup` 系列的指令可以複製並指定特定 `file descriptor` 所指向的 `file description` 。關於 `file descriptor` 與 `file description` 在這篇[文章](https://kkc.github.io/2020/08/22/file-descriptor/) 中有詳細的說明。\n\n### pipe\n```c\nint pipe(int pipefd[2]);\n```\n**System call** `pipe` 會開啟一個可以跨行程( process )溝通的 `FIFO buffer` ( `data channel` ) ，並返回該 `channel` 的兩端(讀端與寫端)。資料流向為 `pipefd[1]` -> `pipefd[0]` 。經常用法為: 先開啟 `pipe` 後透過 `fork` 開啟子行程，這樣就可以透過先前開啟的 `pipe` 進行跨行程溝通。\n\n---\n而上述實作的目標便是透過以上兩個 `system call` 將父行程的輸出導向子行程的輸入。\n\n## cat 的終止條件\n`cat` 是在 `linux` 上經常使用的工具,一直以來都將 `cat` 作為將檔案輸出至終端機的工具。然而我竟然不知道其實際運作原理，著實慚愧。\n參閱 [man page](https://man7.org/linux/man-pages/man1/cat.1.html) 說明。 `cat` 其實是 `concatenate` (聯集)的縮寫，其主要功能是將給定的檔案聯集並輸出至 `STDOUT` 。而當沒有指定檔案時，則會聆聽 `STDIN` 作為輸入。\n對應實作的程式碼如下:\n(此章節中若未特別提及，原始碼皆來自 [cat.c](https://github.com/coreutils/coreutils/blob/master/src/cat.c))\n```c=\nif (STREQ (infile, \"-\"))\n{\n  have_read_stdin = true;\n  input_desc = STDIN_FILENO;\n  ...\n}\nelse\n{\n  input_desc = open (infile, file_open_mode);\n  ...\n}\n```\n\n透過以上實作 `cat` 會依序開啟參數中所給定的每個檔案。\n之後透過呼叫函數\n```c\nstatic bool cat(...)\n```\n來讀取開啟檔案的內容。\n\n在函數 `cat` 中會透過\n```c\nn_read = safe_read (input_desc, inbuf, insize);\n```\n來讀取資料。其中 `safe_read` 是對於 `read` 的包裝，詳細內容請參考[原始碼](https://github.com/coreutils/gnulib/blob/master/lib/safe-read.c)，其中有對於 `MACRO` 的精妙應用。\n\n由於 `cat` 主要是作為讀取檔案的工具，因此可以推斷函數 `cat` 的離開條件應為讀取至檔案結尾 (EOF) ，在 `safe_read` 的原始碼中可以看到以下註解。\n```\nReturn the actual number of bytes read(written), \nzero for EOF\n```\n另外於 `read` 的 `man page` 中也可以看到以下敘述。\n```\nOn success, the number of bytes read is returned (zero indicates end of file)\n```\n因此推測函數 `cat` 會將 `n_read == 0` 作為離開的條件。\n果不其然可以由原始碼中看到\n```c=\nif (n_read == 0)\n{\n  write_pending (outbuf, &bpout);\n  newlines2 = newlines;\n  return true;\n}\n```\n\n到此可知，最後我們需要讓 `pipe` 的 `read` 回傳零以結束 `cat` 。\n\n待續。\n## Reference\n[dup man page](https://man7.org/linux/man-pages/man2/dup.2.html)\n[Linux 的 file descriptor 筆記](https://kkc.github.io/2020/08/22/file-descriptor/)\n[pipe man page](https://man7.org/linux/man-pages/man2/pipe.2.html)\n[cat man page](https://man7.org/linux/man-pages/man1/cat.1.html)\n[cat source code](https://github.com/coreutils/coreutils/blob/master/src/cat.c)\n[safe_read source code](https://github.com/coreutils/gnulib/blob/master/lib/safe-read.c)\n","source":"_posts/linux-pipe-1.md","raw":"---\ntitle: linux pipe 筆記(一)\ndate: 2020-10-20 22:56:28\ntags: Linux\n---\n## 前言\n以下紀錄近期 trace linux kernel module `pipe` 的一些筆記與心得。\n## 緣起\n有朋友在進行關於 `pipe` 的實驗，原始碼如下:\n```c=\nint main(){\n    char *arg1[] = {\"ls\", NULL};\n    char *arg2[] = {\"cat\",\"-n\", NULL};\n    int p[2];\n    if(pipe(p))\n        return 0;\n\n    for(int i = 0; i < 2; i++){\n        pid_t pid;\n        pid = fork();\n        if(pid == 0){\n            if(i == 0){\n                close(p[0]);\n                dup2(p[1], 1);\n                execvp(arg1[0], arg1);\n                close(p[1]);\n                exit(0);\n            }else if(i == 1){\n                close(p[1]);\n                dup2(p[0], 0);\n\n                execvp(arg2[0], arg2);\n                close(p[0]);\n                exit(0);\n            }\n        }else{\n            int status;\n            waitpid(pid, &status, 0);\n        }\n    }\n}\n```\n\n預期的功能如下：\n```bash\n$ ls | cat -n\n```\n預期輸出(該資料夾中有 `main.c` 與 `main` 兩個檔案的狀況下):\n```bash\n$\n     1\tmain\n     2\tmain.c\n$\n```\n\n可是卻發生 `cat` 無法終止的問題 (輸出完預期的字串後，一直停留在 `cat` 中不會停止)。\n實際輸出:\n```bash\n$\n     1\tmain\n     2\tmain.c\n```\n\n首先，來了解上述實作涉及的函式。\n## System calls\n### dup2\n```c\nint dup2(int oldfd, int newfd);\n```\n**System call** `dup` 會複製給定的 `file descriptor` 並返回複製後的 `file descriptor` 。而 `dup2` 則可以指定要複製的 `file descriptor` 。換句話說 `dup` 系列的指令可以複製並指定特定 `file descriptor` 所指向的 `file description` 。關於 `file descriptor` 與 `file description` 在這篇[文章](https://kkc.github.io/2020/08/22/file-descriptor/) 中有詳細的說明。\n\n### pipe\n```c\nint pipe(int pipefd[2]);\n```\n**System call** `pipe` 會開啟一個可以跨行程( process )溝通的 `FIFO buffer` ( `data channel` ) ，並返回該 `channel` 的兩端(讀端與寫端)。資料流向為 `pipefd[1]` -> `pipefd[0]` 。經常用法為: 先開啟 `pipe` 後透過 `fork` 開啟子行程，這樣就可以透過先前開啟的 `pipe` 進行跨行程溝通。\n\n---\n而上述實作的目標便是透過以上兩個 `system call` 將父行程的輸出導向子行程的輸入。\n\n## cat 的終止條件\n`cat` 是在 `linux` 上經常使用的工具,一直以來都將 `cat` 作為將檔案輸出至終端機的工具。然而我竟然不知道其實際運作原理，著實慚愧。\n參閱 [man page](https://man7.org/linux/man-pages/man1/cat.1.html) 說明。 `cat` 其實是 `concatenate` (聯集)的縮寫，其主要功能是將給定的檔案聯集並輸出至 `STDOUT` 。而當沒有指定檔案時，則會聆聽 `STDIN` 作為輸入。\n對應實作的程式碼如下:\n(此章節中若未特別提及，原始碼皆來自 [cat.c](https://github.com/coreutils/coreutils/blob/master/src/cat.c))\n```c=\nif (STREQ (infile, \"-\"))\n{\n  have_read_stdin = true;\n  input_desc = STDIN_FILENO;\n  ...\n}\nelse\n{\n  input_desc = open (infile, file_open_mode);\n  ...\n}\n```\n\n透過以上實作 `cat` 會依序開啟參數中所給定的每個檔案。\n之後透過呼叫函數\n```c\nstatic bool cat(...)\n```\n來讀取開啟檔案的內容。\n\n在函數 `cat` 中會透過\n```c\nn_read = safe_read (input_desc, inbuf, insize);\n```\n來讀取資料。其中 `safe_read` 是對於 `read` 的包裝，詳細內容請參考[原始碼](https://github.com/coreutils/gnulib/blob/master/lib/safe-read.c)，其中有對於 `MACRO` 的精妙應用。\n\n由於 `cat` 主要是作為讀取檔案的工具，因此可以推斷函數 `cat` 的離開條件應為讀取至檔案結尾 (EOF) ，在 `safe_read` 的原始碼中可以看到以下註解。\n```\nReturn the actual number of bytes read(written), \nzero for EOF\n```\n另外於 `read` 的 `man page` 中也可以看到以下敘述。\n```\nOn success, the number of bytes read is returned (zero indicates end of file)\n```\n因此推測函數 `cat` 會將 `n_read == 0` 作為離開的條件。\n果不其然可以由原始碼中看到\n```c=\nif (n_read == 0)\n{\n  write_pending (outbuf, &bpout);\n  newlines2 = newlines;\n  return true;\n}\n```\n\n到此可知，最後我們需要讓 `pipe` 的 `read` 回傳零以結束 `cat` 。\n\n待續。\n## Reference\n[dup man page](https://man7.org/linux/man-pages/man2/dup.2.html)\n[Linux 的 file descriptor 筆記](https://kkc.github.io/2020/08/22/file-descriptor/)\n[pipe man page](https://man7.org/linux/man-pages/man2/pipe.2.html)\n[cat man page](https://man7.org/linux/man-pages/man1/cat.1.html)\n[cat source code](https://github.com/coreutils/coreutils/blob/master/src/cat.c)\n[safe_read source code](https://github.com/coreutils/gnulib/blob/master/lib/safe-read.c)\n","slug":"linux-pipe-1","published":1,"updated":"2020-10-20T15:26:02.701Z","_id":"ckgi3hjt80000esbeeoke3lg7","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>以下紀錄近期 trace linux kernel module <code>pipe</code> 的一些筆記與心得。</p>\n<h2 id=\"緣起\"><a href=\"#緣起\" class=\"headerlink\" title=\"緣起\"></a>緣起</h2><p>有朋友在進行關於 <code>pipe</code> 的實驗，原始碼如下:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *arg1[] = &#123;<span class=\"string\">&quot;ls&quot;</span>, <span class=\"literal\">NULL</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *arg2[] = &#123;<span class=\"string\">&quot;cat&quot;</span>,<span class=\"string\">&quot;-n&quot;</span>, <span class=\"literal\">NULL</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pipe(p))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">pid_t</span> pid;</span><br><span class=\"line\">        pid = fork();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pid == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                close(p[<span class=\"number\">0</span>]);</span><br><span class=\"line\">                dup2(p[<span class=\"number\">1</span>], <span class=\"number\">1</span>);</span><br><span class=\"line\">                execvp(arg1[<span class=\"number\">0</span>], arg1);</span><br><span class=\"line\">                close(p[<span class=\"number\">1</span>]);</span><br><span class=\"line\">                <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                close(p[<span class=\"number\">1</span>]);</span><br><span class=\"line\">                dup2(p[<span class=\"number\">0</span>], <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                execvp(arg2[<span class=\"number\">0</span>], arg2);</span><br><span class=\"line\">                close(p[<span class=\"number\">0</span>]);</span><br><span class=\"line\">                <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> status;</span><br><span class=\"line\">            waitpid(pid, &amp;status, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>預期的功能如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls | cat -n</span><br></pre></td></tr></table></figure>\n<p>預期輸出(該資料夾中有 <code>main.c</code> 與 <code>main</code> 兩個檔案的狀況下):</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$</span><br><span class=\"line\">     1\tmain</span><br><span class=\"line\">     2\tmain.c</span><br><span class=\"line\">$</span><br></pre></td></tr></table></figure>\n\n<p>可是卻發生 <code>cat</code> 無法終止的問題 (輸出完預期的字串後，一直停留在 <code>cat</code> 中不會停止)。<br>實際輸出:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$</span><br><span class=\"line\">     1\tmain</span><br><span class=\"line\">     2\tmain.c</span><br></pre></td></tr></table></figure>\n\n<p>首先，來了解上述實作涉及的函式。</p>\n<h2 id=\"System-calls\"><a href=\"#System-calls\" class=\"headerlink\" title=\"System calls\"></a>System calls</h2><h3 id=\"dup2\"><a href=\"#dup2\" class=\"headerlink\" title=\"dup2\"></a>dup2</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dup2</span><span class=\"params\">(<span class=\"keyword\">int</span> oldfd, <span class=\"keyword\">int</span> newfd)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><strong>System call</strong> <code>dup</code> 會複製給定的 <code>file descriptor</code> 並返回複製後的 <code>file descriptor</code> 。而 <code>dup2</code> 則可以指定要複製的 <code>file descriptor</code> 。換句話說 <code>dup</code> 系列的指令可以複製並指定特定 <code>file descriptor</code> 所指向的 <code>file description</code> 。關於 <code>file descriptor</code> 與 <code>file description</code> 在這篇<a href=\"https://kkc.github.io/2020/08/22/file-descriptor/\">文章</a> 中有詳細的說明。</p>\n<h3 id=\"pipe\"><a href=\"#pipe\" class=\"headerlink\" title=\"pipe\"></a>pipe</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pipe</span><span class=\"params\">(<span class=\"keyword\">int</span> pipefd[<span class=\"number\">2</span>])</span></span>;</span><br></pre></td></tr></table></figure>\n<p><strong>System call</strong> <code>pipe</code> 會開啟一個可以跨行程( process )溝通的 <code>FIFO buffer</code> ( <code>data channel</code> ) ，並返回該 <code>channel</code> 的兩端(讀端與寫端)。資料流向為 <code>pipefd[1]</code> -&gt; <code>pipefd[0]</code> 。經常用法為: 先開啟 <code>pipe</code> 後透過 <code>fork</code> 開啟子行程，這樣就可以透過先前開啟的 <code>pipe</code> 進行跨行程溝通。</p>\n<hr>\n<p>而上述實作的目標便是透過以上兩個 <code>system call</code> 將父行程的輸出導向子行程的輸入。</p>\n<h2 id=\"cat-的終止條件\"><a href=\"#cat-的終止條件\" class=\"headerlink\" title=\"cat 的終止條件\"></a>cat 的終止條件</h2><p><code>cat</code> 是在 <code>linux</code> 上經常使用的工具,一直以來都將 <code>cat</code> 作為將檔案輸出至終端機的工具。然而我竟然不知道其實際運作原理，著實慚愧。<br>參閱 <a href=\"https://man7.org/linux/man-pages/man1/cat.1.html\">man page</a> 說明。 <code>cat</code> 其實是 <code>concatenate</code> (聯集)的縮寫，其主要功能是將給定的檔案聯集並輸出至 <code>STDOUT</code> 。而當沒有指定檔案時，則會聆聽 <code>STDIN</code> 作為輸入。<br>對應實作的程式碼如下:<br>(此章節中若未特別提及，原始碼皆來自 <a href=\"https://github.com/coreutils/coreutils/blob/master/src/cat.c\">cat.c</a>)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (STREQ (infile, <span class=\"string\">&quot;-&quot;</span>))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  have_read_stdin = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  input_desc = STDIN_FILENO;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  input_desc = open (infile, file_open_mode);</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>透過以上實作 <code>cat</code> 會依序開啟參數中所給定的每個檔案。<br>之後透過呼叫函數</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">cat</span><span class=\"params\">(...)</span></span></span><br></pre></td></tr></table></figure>\n<p>來讀取開啟檔案的內容。</p>\n<p>在函數 <code>cat</code> 中會透過</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n_read = safe_read (input_desc, inbuf, insize);</span><br></pre></td></tr></table></figure>\n<p>來讀取資料。其中 <code>safe_read</code> 是對於 <code>read</code> 的包裝，詳細內容請參考<a href=\"https://github.com/coreutils/gnulib/blob/master/lib/safe-read.c\">原始碼</a>，其中有對於 <code>MACRO</code> 的精妙應用。</p>\n<p>由於 <code>cat</code> 主要是作為讀取檔案的工具，因此可以推斷函數 <code>cat</code> 的離開條件應為讀取至檔案結尾 (EOF) ，在 <code>safe_read</code> 的原始碼中可以看到以下註解。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Return the actual number of bytes read(written), </span><br><span class=\"line\">zero for EOF</span><br></pre></td></tr></table></figure>\n<p>另外於 <code>read</code> 的 <code>man page</code> 中也可以看到以下敘述。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">On success, the number of bytes read is returned (zero indicates end of file)</span><br></pre></td></tr></table></figure>\n<p>因此推測函數 <code>cat</code> 會將 <code>n_read == 0</code> 作為離開的條件。<br>果不其然可以由原始碼中看到</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (n_read == <span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  write_pending (outbuf, &amp;bpout);</span><br><span class=\"line\">  newlines2 = newlines;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>到此可知，最後我們需要讓 <code>pipe</code> 的 <code>read</code> 回傳零以結束 <code>cat</code> 。</p>\n<p>待續。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://man7.org/linux/man-pages/man2/dup.2.html\">dup man page</a><br><a href=\"https://kkc.github.io/2020/08/22/file-descriptor/\">Linux 的 file descriptor 筆記</a><br><a href=\"https://man7.org/linux/man-pages/man2/pipe.2.html\">pipe man page</a><br><a href=\"https://man7.org/linux/man-pages/man1/cat.1.html\">cat man page</a><br><a href=\"https://github.com/coreutils/coreutils/blob/master/src/cat.c\">cat source code</a><br><a href=\"https://github.com/coreutils/gnulib/blob/master/lib/safe-read.c\">safe_read source code</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>以下紀錄近期 trace linux kernel module <code>pipe</code> 的一些筆記與心得。</p>\n<h2 id=\"緣起\"><a href=\"#緣起\" class=\"headerlink\" title=\"緣起\"></a>緣起</h2><p>有朋友在進行關於 <code>pipe</code> 的實驗，原始碼如下:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *arg1[] = &#123;<span class=\"string\">&quot;ls&quot;</span>, <span class=\"literal\">NULL</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *arg2[] = &#123;<span class=\"string\">&quot;cat&quot;</span>,<span class=\"string\">&quot;-n&quot;</span>, <span class=\"literal\">NULL</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pipe(p))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">pid_t</span> pid;</span><br><span class=\"line\">        pid = fork();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pid == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                close(p[<span class=\"number\">0</span>]);</span><br><span class=\"line\">                dup2(p[<span class=\"number\">1</span>], <span class=\"number\">1</span>);</span><br><span class=\"line\">                execvp(arg1[<span class=\"number\">0</span>], arg1);</span><br><span class=\"line\">                close(p[<span class=\"number\">1</span>]);</span><br><span class=\"line\">                <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                close(p[<span class=\"number\">1</span>]);</span><br><span class=\"line\">                dup2(p[<span class=\"number\">0</span>], <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                execvp(arg2[<span class=\"number\">0</span>], arg2);</span><br><span class=\"line\">                close(p[<span class=\"number\">0</span>]);</span><br><span class=\"line\">                <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> status;</span><br><span class=\"line\">            waitpid(pid, &amp;status, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>預期的功能如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls | cat -n</span><br></pre></td></tr></table></figure>\n<p>預期輸出(該資料夾中有 <code>main.c</code> 與 <code>main</code> 兩個檔案的狀況下):</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$</span><br><span class=\"line\">     1\tmain</span><br><span class=\"line\">     2\tmain.c</span><br><span class=\"line\">$</span><br></pre></td></tr></table></figure>\n\n<p>可是卻發生 <code>cat</code> 無法終止的問題 (輸出完預期的字串後，一直停留在 <code>cat</code> 中不會停止)。<br>實際輸出:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$</span><br><span class=\"line\">     1\tmain</span><br><span class=\"line\">     2\tmain.c</span><br></pre></td></tr></table></figure>\n\n<p>首先，來了解上述實作涉及的函式。</p>\n<h2 id=\"System-calls\"><a href=\"#System-calls\" class=\"headerlink\" title=\"System calls\"></a>System calls</h2><h3 id=\"dup2\"><a href=\"#dup2\" class=\"headerlink\" title=\"dup2\"></a>dup2</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dup2</span><span class=\"params\">(<span class=\"keyword\">int</span> oldfd, <span class=\"keyword\">int</span> newfd)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><strong>System call</strong> <code>dup</code> 會複製給定的 <code>file descriptor</code> 並返回複製後的 <code>file descriptor</code> 。而 <code>dup2</code> 則可以指定要複製的 <code>file descriptor</code> 。換句話說 <code>dup</code> 系列的指令可以複製並指定特定 <code>file descriptor</code> 所指向的 <code>file description</code> 。關於 <code>file descriptor</code> 與 <code>file description</code> 在這篇<a href=\"https://kkc.github.io/2020/08/22/file-descriptor/\">文章</a> 中有詳細的說明。</p>\n<h3 id=\"pipe\"><a href=\"#pipe\" class=\"headerlink\" title=\"pipe\"></a>pipe</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pipe</span><span class=\"params\">(<span class=\"keyword\">int</span> pipefd[<span class=\"number\">2</span>])</span></span>;</span><br></pre></td></tr></table></figure>\n<p><strong>System call</strong> <code>pipe</code> 會開啟一個可以跨行程( process )溝通的 <code>FIFO buffer</code> ( <code>data channel</code> ) ，並返回該 <code>channel</code> 的兩端(讀端與寫端)。資料流向為 <code>pipefd[1]</code> -&gt; <code>pipefd[0]</code> 。經常用法為: 先開啟 <code>pipe</code> 後透過 <code>fork</code> 開啟子行程，這樣就可以透過先前開啟的 <code>pipe</code> 進行跨行程溝通。</p>\n<hr>\n<p>而上述實作的目標便是透過以上兩個 <code>system call</code> 將父行程的輸出導向子行程的輸入。</p>\n<h2 id=\"cat-的終止條件\"><a href=\"#cat-的終止條件\" class=\"headerlink\" title=\"cat 的終止條件\"></a>cat 的終止條件</h2><p><code>cat</code> 是在 <code>linux</code> 上經常使用的工具,一直以來都將 <code>cat</code> 作為將檔案輸出至終端機的工具。然而我竟然不知道其實際運作原理，著實慚愧。<br>參閱 <a href=\"https://man7.org/linux/man-pages/man1/cat.1.html\">man page</a> 說明。 <code>cat</code> 其實是 <code>concatenate</code> (聯集)的縮寫，其主要功能是將給定的檔案聯集並輸出至 <code>STDOUT</code> 。而當沒有指定檔案時，則會聆聽 <code>STDIN</code> 作為輸入。<br>對應實作的程式碼如下:<br>(此章節中若未特別提及，原始碼皆來自 <a href=\"https://github.com/coreutils/coreutils/blob/master/src/cat.c\">cat.c</a>)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (STREQ (infile, <span class=\"string\">&quot;-&quot;</span>))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  have_read_stdin = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  input_desc = STDIN_FILENO;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  input_desc = open (infile, file_open_mode);</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>透過以上實作 <code>cat</code> 會依序開啟參數中所給定的每個檔案。<br>之後透過呼叫函數</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">cat</span><span class=\"params\">(...)</span></span></span><br></pre></td></tr></table></figure>\n<p>來讀取開啟檔案的內容。</p>\n<p>在函數 <code>cat</code> 中會透過</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n_read = safe_read (input_desc, inbuf, insize);</span><br></pre></td></tr></table></figure>\n<p>來讀取資料。其中 <code>safe_read</code> 是對於 <code>read</code> 的包裝，詳細內容請參考<a href=\"https://github.com/coreutils/gnulib/blob/master/lib/safe-read.c\">原始碼</a>，其中有對於 <code>MACRO</code> 的精妙應用。</p>\n<p>由於 <code>cat</code> 主要是作為讀取檔案的工具，因此可以推斷函數 <code>cat</code> 的離開條件應為讀取至檔案結尾 (EOF) ，在 <code>safe_read</code> 的原始碼中可以看到以下註解。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Return the actual number of bytes read(written), </span><br><span class=\"line\">zero for EOF</span><br></pre></td></tr></table></figure>\n<p>另外於 <code>read</code> 的 <code>man page</code> 中也可以看到以下敘述。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">On success, the number of bytes read is returned (zero indicates end of file)</span><br></pre></td></tr></table></figure>\n<p>因此推測函數 <code>cat</code> 會將 <code>n_read == 0</code> 作為離開的條件。<br>果不其然可以由原始碼中看到</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (n_read == <span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  write_pending (outbuf, &amp;bpout);</span><br><span class=\"line\">  newlines2 = newlines;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>到此可知，最後我們需要讓 <code>pipe</code> 的 <code>read</code> 回傳零以結束 <code>cat</code> 。</p>\n<p>待續。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://man7.org/linux/man-pages/man2/dup.2.html\">dup man page</a><br><a href=\"https://kkc.github.io/2020/08/22/file-descriptor/\">Linux 的 file descriptor 筆記</a><br><a href=\"https://man7.org/linux/man-pages/man2/pipe.2.html\">pipe man page</a><br><a href=\"https://man7.org/linux/man-pages/man1/cat.1.html\">cat man page</a><br><a href=\"https://github.com/coreutils/coreutils/blob/master/src/cat.c\">cat source code</a><br><a href=\"https://github.com/coreutils/gnulib/blob/master/lib/safe-read.c\">safe_read source code</a></p>\n"},{"title":"whoami","date":"2020-10-20T15:02:56.000Z","_content":"我只是一隻對於資訊科技抱有熱情的豬。\n領域偏向嵌入式，努力往系統層學習中...\n近期學習方向：作業系統實作 ， Rust 。\n\n## Reach me\n- email: justapig9020@gmail.com\n","source":"_posts/whoami.md","raw":"---\ntitle: whoami\ndate: 2020-10-20 23:02:56\ntags:\n---\n我只是一隻對於資訊科技抱有熱情的豬。\n領域偏向嵌入式，努力往系統層學習中...\n近期學習方向：作業系統實作 ， Rust 。\n\n## Reach me\n- email: justapig9020@gmail.com\n","slug":"whoami","published":1,"updated":"2020-10-20T15:16:06.984Z","_id":"ckgi40jzf00005lbe6bjm6off","comments":1,"layout":"post","photos":[],"link":"","content":"<p>我只是一隻對於資訊科技抱有熱情的豬。<br>領域偏向嵌入式，努力往系統層學習中…<br>近期學習方向：作業系統實作 ， Rust 。</p>\n<h2 id=\"Reach-me\"><a href=\"#Reach-me\" class=\"headerlink\" title=\"Reach me\"></a>Reach me</h2><ul>\n<li>email: <a href=\"mailto:&#x6a;&#x75;&#115;&#x74;&#x61;&#x70;&#105;&#x67;&#x39;&#48;&#x32;&#x30;&#x40;&#x67;&#109;&#x61;&#105;&#108;&#x2e;&#x63;&#111;&#109;\">&#x6a;&#x75;&#115;&#x74;&#x61;&#x70;&#105;&#x67;&#x39;&#48;&#x32;&#x30;&#x40;&#x67;&#109;&#x61;&#105;&#108;&#x2e;&#x63;&#111;&#109;</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>我只是一隻對於資訊科技抱有熱情的豬。<br>領域偏向嵌入式，努力往系統層學習中…<br>近期學習方向：作業系統實作 ， Rust 。</p>\n<h2 id=\"Reach-me\"><a href=\"#Reach-me\" class=\"headerlink\" title=\"Reach me\"></a>Reach me</h2><ul>\n<li>email: <a href=\"mailto:&#x6a;&#x75;&#115;&#x74;&#x61;&#x70;&#105;&#x67;&#x39;&#48;&#x32;&#x30;&#x40;&#x67;&#109;&#x61;&#105;&#108;&#x2e;&#x63;&#111;&#109;\">&#x6a;&#x75;&#115;&#x74;&#x61;&#x70;&#105;&#x67;&#x39;&#48;&#x32;&#x30;&#x40;&#x67;&#109;&#x61;&#105;&#108;&#x2e;&#x63;&#111;&#109;</a></li>\n</ul>\n"},{"title":"linux pipe 筆記(二)","date":"2020-10-22T14:41:16.000Z","_content":"\n## pipe 原理\n以下 `pipe` 原始碼來自 `linux v5.4` ， [bootlin](https://elixir.bootlin.com/linux/v5.4/source/fs/pipe.c) 超連結。\n\n### 開啟\n開啟新的 `pipe` 不是透過一般的 `open` ，而是使用獨立的 **system call** `pipe` 。該 **system call** 實作如下。\n```c=\nSYSCALL_DEFINE1(pipe, int __user *, fildes)\n{\n\treturn do_pipe2(fildes, 0);\n}\n```\n\n該 **system call** 的主要實作為函數 `do_pipe2()` 。在該函數中會\n1. 建立新的 `pipe` 物件。\n2. 獲取兩個 `file descriptor` 並將其回傳至 `user space` 。\n4. 將兩個 `file descriptor` 指向對應的 `file description` 。\n透過上述步驟就可以將原本作為參數傳入的陣列填上對應的兩個 `file descriptor` 了。\n\n在 `do_pip2e()` 中，透過 `__do_pipe_flags()` 呼叫 `create_pipe_files()` 建立新的 `pipe` 物件。\n在 `create_pipe_files()` 中呼叫 `get_pipe_inode()` 。在 `get_pipe_inode()` 函數中，可以看到其創建一個 `struct pipe_inode_info` 的物件並透過 `inode` 物件的 `i_pipe` 成員指向他。\n檢視 `struct pipe_inode_info` 內容，[原始碼](https://elixir.bootlin.com/linux/v5.4/source/include/linux/pipe_fs_i.h#L48)，以下節錄我們感興趣的部份：\n```c=\nstruct pipe_inode_info {\n    ...\n\tunsigned int readers;\n\tunsigned int writers;\n    ...\n\tstruct pipe_buffer *bufs;\n    ...\n};\n```\n可以發現，在 `struct pipe_inode_info` 中包含了兩個計數器。根據變數名稱可以推測分別儲存此物件當前**讀者**與**寫者**的數量。\n\n可以在 `get_pipe_inode()` 中看到，這兩個計數器如預期般的被初始化為 `1` 。\n```c=\npipe->readers = pipe->writers = 1;\n```\n另外在該函數中\n```c=\ninode->i_pipe = pipe;\n```\n透過上方程式碼由指標將新配置的 `pipe` 物件變成 `inode` 的成員。\n\n在 `get_pipe_inode()` 回傳新建立的 `inode` 物件後\n```c=\nf = alloc_file_pseudo(inode, pipe_mnt, \"\",\n\t\t\t\tO_WRONLY | (flags & (O_NONBLOCK | O_DIRECT)),\n\t\t\t\t&pipefifo_fops);\n...\nf->private_data = inode->i_pipe;\nres[0] = alloc_file_clone(f, O_RDONLY | (flags & O_NONBLOCK),\n\t\t\t\t  &pipefifo_fops);\n...\nres[0]->private_data = inode->i_pipe;\nres[1] = f;\n```\n透過以上程式碼將 `pipe_inode_info` 物件變為兩個 `file description` 的 `private_data` 成員。而這兩個 `file description` 內容大致相同(由於是透過 `clone` 複製)，差別只在於讀寫權限。由於回傳的 `pipefd[1]` 為寫端而 `pipefd[0]` 為讀端，在此可以發現最初開啟的 `f` 權限為可讀寫，而 `f` 也被存放至 `res[1]` 。而之後 `clone` 的權限則為唯讀，並被存放至 `res[0]` 。以上的行為皆與 `pipe man page` 的敘述相符。\n\n而 `res` 所指向的開啟的檔案，在回到 `do_pipe_flags()` 中後，透過\n```c=\n/* files 即是 res */\nfd_install(fd[0], files[0]);\nfd_install(fd[1], files[1]);\n```\n安插至個別的 `file descriptor` 上了。所以實際上 `pipe` 所開啟的兩個 `file descriptor` 指向的都是有相同內容的兩個 `file` 物件。如上所述，兩物件差異只在於讀寫權限。而該兩物件的 `private data` 則都指向同一 `pipe_inode_info` 物件。\n\n至此， `pipe` 的開起與其結構大致告一段落。\n接下來將探討 `pipe` 的讀寫機制並修復原有程式的錯誤。\n\n待續。\n## Reference\n[Linux 的 file descriptor 筆記](https://kkc.github.io/2020/08/22/file-descriptor/)\n[pipe man page](https://man7.org/linux/man-pages/man2/pipe.2.html)\n[bootlin pipe.c](https://elixir.bootlin.com/linux/v5.4/source/fs/pipe.c)\n","source":"_posts/linux-pipe-2.md","raw":"---\ntitle: linux pipe 筆記(二)\ndate: 2020-10-22 22:41:16\ntags: Linux\n---\n\n## pipe 原理\n以下 `pipe` 原始碼來自 `linux v5.4` ， [bootlin](https://elixir.bootlin.com/linux/v5.4/source/fs/pipe.c) 超連結。\n\n### 開啟\n開啟新的 `pipe` 不是透過一般的 `open` ，而是使用獨立的 **system call** `pipe` 。該 **system call** 實作如下。\n```c=\nSYSCALL_DEFINE1(pipe, int __user *, fildes)\n{\n\treturn do_pipe2(fildes, 0);\n}\n```\n\n該 **system call** 的主要實作為函數 `do_pipe2()` 。在該函數中會\n1. 建立新的 `pipe` 物件。\n2. 獲取兩個 `file descriptor` 並將其回傳至 `user space` 。\n4. 將兩個 `file descriptor` 指向對應的 `file description` 。\n透過上述步驟就可以將原本作為參數傳入的陣列填上對應的兩個 `file descriptor` 了。\n\n在 `do_pip2e()` 中，透過 `__do_pipe_flags()` 呼叫 `create_pipe_files()` 建立新的 `pipe` 物件。\n在 `create_pipe_files()` 中呼叫 `get_pipe_inode()` 。在 `get_pipe_inode()` 函數中，可以看到其創建一個 `struct pipe_inode_info` 的物件並透過 `inode` 物件的 `i_pipe` 成員指向他。\n檢視 `struct pipe_inode_info` 內容，[原始碼](https://elixir.bootlin.com/linux/v5.4/source/include/linux/pipe_fs_i.h#L48)，以下節錄我們感興趣的部份：\n```c=\nstruct pipe_inode_info {\n    ...\n\tunsigned int readers;\n\tunsigned int writers;\n    ...\n\tstruct pipe_buffer *bufs;\n    ...\n};\n```\n可以發現，在 `struct pipe_inode_info` 中包含了兩個計數器。根據變數名稱可以推測分別儲存此物件當前**讀者**與**寫者**的數量。\n\n可以在 `get_pipe_inode()` 中看到，這兩個計數器如預期般的被初始化為 `1` 。\n```c=\npipe->readers = pipe->writers = 1;\n```\n另外在該函數中\n```c=\ninode->i_pipe = pipe;\n```\n透過上方程式碼由指標將新配置的 `pipe` 物件變成 `inode` 的成員。\n\n在 `get_pipe_inode()` 回傳新建立的 `inode` 物件後\n```c=\nf = alloc_file_pseudo(inode, pipe_mnt, \"\",\n\t\t\t\tO_WRONLY | (flags & (O_NONBLOCK | O_DIRECT)),\n\t\t\t\t&pipefifo_fops);\n...\nf->private_data = inode->i_pipe;\nres[0] = alloc_file_clone(f, O_RDONLY | (flags & O_NONBLOCK),\n\t\t\t\t  &pipefifo_fops);\n...\nres[0]->private_data = inode->i_pipe;\nres[1] = f;\n```\n透過以上程式碼將 `pipe_inode_info` 物件變為兩個 `file description` 的 `private_data` 成員。而這兩個 `file description` 內容大致相同(由於是透過 `clone` 複製)，差別只在於讀寫權限。由於回傳的 `pipefd[1]` 為寫端而 `pipefd[0]` 為讀端，在此可以發現最初開啟的 `f` 權限為可讀寫，而 `f` 也被存放至 `res[1]` 。而之後 `clone` 的權限則為唯讀，並被存放至 `res[0]` 。以上的行為皆與 `pipe man page` 的敘述相符。\n\n而 `res` 所指向的開啟的檔案，在回到 `do_pipe_flags()` 中後，透過\n```c=\n/* files 即是 res */\nfd_install(fd[0], files[0]);\nfd_install(fd[1], files[1]);\n```\n安插至個別的 `file descriptor` 上了。所以實際上 `pipe` 所開啟的兩個 `file descriptor` 指向的都是有相同內容的兩個 `file` 物件。如上所述，兩物件差異只在於讀寫權限。而該兩物件的 `private data` 則都指向同一 `pipe_inode_info` 物件。\n\n至此， `pipe` 的開起與其結構大致告一段落。\n接下來將探討 `pipe` 的讀寫機制並修復原有程式的錯誤。\n\n待續。\n## Reference\n[Linux 的 file descriptor 筆記](https://kkc.github.io/2020/08/22/file-descriptor/)\n[pipe man page](https://man7.org/linux/man-pages/man2/pipe.2.html)\n[bootlin pipe.c](https://elixir.bootlin.com/linux/v5.4/source/fs/pipe.c)\n","slug":"linux-pipe-2","published":1,"updated":"2020-10-22T14:47:43.166Z","_id":"ckgkxty7d0000wdbe57kk3m4o","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"pipe-原理\"><a href=\"#pipe-原理\" class=\"headerlink\" title=\"pipe 原理\"></a>pipe 原理</h2><p>以下 <code>pipe</code> 原始碼來自 <code>linux v5.4</code> ， <a href=\"https://elixir.bootlin.com/linux/v5.4/source/fs/pipe.c\">bootlin</a> 超連結。</p>\n<h3 id=\"開啟\"><a href=\"#開啟\" class=\"headerlink\" title=\"開啟\"></a>開啟</h3><p>開啟新的 <code>pipe</code> 不是透過一般的 <code>open</code> ，而是使用獨立的 <strong>system call</strong> <code>pipe</code> 。該 <strong>system call</strong> 實作如下。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SYSCALL_DEFINE1(pipe, <span class=\"keyword\">int</span> __user *, fildes)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> do_pipe2(fildes, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>該 <strong>system call</strong> 的主要實作為函數 <code>do_pipe2()</code> 。在該函數中會</p>\n<ol>\n<li>建立新的 <code>pipe</code> 物件。</li>\n<li>獲取兩個 <code>file descriptor</code> 並將其回傳至 <code>user space</code> 。</li>\n<li>將兩個 <code>file descriptor</code> 指向對應的 <code>file description</code> 。<br>透過上述步驟就可以將原本作為參數傳入的陣列填上對應的兩個 <code>file descriptor</code> 了。</li>\n</ol>\n<p>在 <code>do_pip2e()</code> 中，透過 <code>__do_pipe_flags()</code> 呼叫 <code>create_pipe_files()</code> 建立新的 <code>pipe</code> 物件。<br>在 <code>create_pipe_files()</code> 中呼叫 <code>get_pipe_inode()</code> 。在 <code>get_pipe_inode()</code> 函數中，可以看到其創建一個 <code>struct pipe_inode_info</code> 的物件並透過 <code>inode</code> 物件的 <code>i_pipe</code> 成員指向他。<br>檢視 <code>struct pipe_inode_info</code> 內容，<a href=\"https://elixir.bootlin.com/linux/v5.4/source/include/linux/pipe_fs_i.h#L48\">原始碼</a>，以下節錄我們感興趣的部份：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pipe_inode_info</span> &#123;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> readers;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> writers;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pipe_buffer</span> *<span class=\"title\">bufs</span>;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>可以發現，在 <code>struct pipe_inode_info</code> 中包含了兩個計數器。根據變數名稱可以推測分別儲存此物件當前<strong>讀者</strong>與<strong>寫者</strong>的數量。</p>\n<p>可以在 <code>get_pipe_inode()</code> 中看到，這兩個計數器如預期般的被初始化為 <code>1</code> 。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipe-&gt;readers = pipe-&gt;writers = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>另外在該函數中</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inode-&gt;i_pipe = pipe;</span><br></pre></td></tr></table></figure>\n<p>透過上方程式碼由指標將新配置的 <code>pipe</code> 物件變成 <code>inode</code> 的成員。</p>\n<p>在 <code>get_pipe_inode()</code> 回傳新建立的 <code>inode</code> 物件後</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = alloc_file_pseudo(inode, pipe_mnt, <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">\t\t\t\tO_WRONLY | (flags &amp; (O_NONBLOCK | O_DIRECT)),</span><br><span class=\"line\">\t\t\t\t&amp;pipefifo_fops);</span><br><span class=\"line\">...</span><br><span class=\"line\">f-&gt;private_data = inode-&gt;i_pipe;</span><br><span class=\"line\">res[<span class=\"number\">0</span>] = alloc_file_clone(f, O_RDONLY | (flags &amp; O_NONBLOCK),</span><br><span class=\"line\">\t\t\t\t  &amp;pipefifo_fops);</span><br><span class=\"line\">...</span><br><span class=\"line\">res[<span class=\"number\">0</span>]-&gt;private_data = inode-&gt;i_pipe;</span><br><span class=\"line\">res[<span class=\"number\">1</span>] = f;</span><br></pre></td></tr></table></figure>\n<p>透過以上程式碼將 <code>pipe_inode_info</code> 物件變為兩個 <code>file description</code> 的 <code>private_data</code> 成員。而這兩個 <code>file description</code> 內容大致相同(由於是透過 <code>clone</code> 複製)，差別只在於讀寫權限。由於回傳的 <code>pipefd[1]</code> 為寫端而 <code>pipefd[0]</code> 為讀端，在此可以發現最初開啟的 <code>f</code> 權限為可讀寫，而 <code>f</code> 也被存放至 <code>res[1]</code> 。而之後 <code>clone</code> 的權限則為唯讀，並被存放至 <code>res[0]</code> 。以上的行為皆與 <code>pipe man page</code> 的敘述相符。</p>\n<p>而 <code>res</code> 所指向的開啟的檔案，在回到 <code>do_pipe_flags()</code> 中後，透過</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* files 即是 res */</span></span><br><span class=\"line\">fd_install(fd[<span class=\"number\">0</span>], files[<span class=\"number\">0</span>]);</span><br><span class=\"line\">fd_install(fd[<span class=\"number\">1</span>], files[<span class=\"number\">1</span>]);</span><br></pre></td></tr></table></figure>\n<p>安插至個別的 <code>file descriptor</code> 上了。所以實際上 <code>pipe</code> 所開啟的兩個 <code>file descriptor</code> 指向的都是有相同內容的兩個 <code>file</code> 物件。如上所述，兩物件差異只在於讀寫權限。而該兩物件的 <code>private data</code> 則都指向同一 <code>pipe_inode_info</code> 物件。</p>\n<p>至此， <code>pipe</code> 的開起與其結構大致告一段落。<br>接下來將探討 <code>pipe</code> 的讀寫機制並修復原有程式的錯誤。</p>\n<p>待續。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://kkc.github.io/2020/08/22/file-descriptor/\">Linux 的 file descriptor 筆記</a><br><a href=\"https://man7.org/linux/man-pages/man2/pipe.2.html\">pipe man page</a><br><a href=\"https://elixir.bootlin.com/linux/v5.4/source/fs/pipe.c\">bootlin pipe.c</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"pipe-原理\"><a href=\"#pipe-原理\" class=\"headerlink\" title=\"pipe 原理\"></a>pipe 原理</h2><p>以下 <code>pipe</code> 原始碼來自 <code>linux v5.4</code> ， <a href=\"https://elixir.bootlin.com/linux/v5.4/source/fs/pipe.c\">bootlin</a> 超連結。</p>\n<h3 id=\"開啟\"><a href=\"#開啟\" class=\"headerlink\" title=\"開啟\"></a>開啟</h3><p>開啟新的 <code>pipe</code> 不是透過一般的 <code>open</code> ，而是使用獨立的 <strong>system call</strong> <code>pipe</code> 。該 <strong>system call</strong> 實作如下。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SYSCALL_DEFINE1(pipe, <span class=\"keyword\">int</span> __user *, fildes)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> do_pipe2(fildes, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>該 <strong>system call</strong> 的主要實作為函數 <code>do_pipe2()</code> 。在該函數中會</p>\n<ol>\n<li>建立新的 <code>pipe</code> 物件。</li>\n<li>獲取兩個 <code>file descriptor</code> 並將其回傳至 <code>user space</code> 。</li>\n<li>將兩個 <code>file descriptor</code> 指向對應的 <code>file description</code> 。<br>透過上述步驟就可以將原本作為參數傳入的陣列填上對應的兩個 <code>file descriptor</code> 了。</li>\n</ol>\n<p>在 <code>do_pip2e()</code> 中，透過 <code>__do_pipe_flags()</code> 呼叫 <code>create_pipe_files()</code> 建立新的 <code>pipe</code> 物件。<br>在 <code>create_pipe_files()</code> 中呼叫 <code>get_pipe_inode()</code> 。在 <code>get_pipe_inode()</code> 函數中，可以看到其創建一個 <code>struct pipe_inode_info</code> 的物件並透過 <code>inode</code> 物件的 <code>i_pipe</code> 成員指向他。<br>檢視 <code>struct pipe_inode_info</code> 內容，<a href=\"https://elixir.bootlin.com/linux/v5.4/source/include/linux/pipe_fs_i.h#L48\">原始碼</a>，以下節錄我們感興趣的部份：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pipe_inode_info</span> &#123;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> readers;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> writers;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pipe_buffer</span> *<span class=\"title\">bufs</span>;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>可以發現，在 <code>struct pipe_inode_info</code> 中包含了兩個計數器。根據變數名稱可以推測分別儲存此物件當前<strong>讀者</strong>與<strong>寫者</strong>的數量。</p>\n<p>可以在 <code>get_pipe_inode()</code> 中看到，這兩個計數器如預期般的被初始化為 <code>1</code> 。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipe-&gt;readers = pipe-&gt;writers = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>另外在該函數中</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inode-&gt;i_pipe = pipe;</span><br></pre></td></tr></table></figure>\n<p>透過上方程式碼由指標將新配置的 <code>pipe</code> 物件變成 <code>inode</code> 的成員。</p>\n<p>在 <code>get_pipe_inode()</code> 回傳新建立的 <code>inode</code> 物件後</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = alloc_file_pseudo(inode, pipe_mnt, <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">\t\t\t\tO_WRONLY | (flags &amp; (O_NONBLOCK | O_DIRECT)),</span><br><span class=\"line\">\t\t\t\t&amp;pipefifo_fops);</span><br><span class=\"line\">...</span><br><span class=\"line\">f-&gt;private_data = inode-&gt;i_pipe;</span><br><span class=\"line\">res[<span class=\"number\">0</span>] = alloc_file_clone(f, O_RDONLY | (flags &amp; O_NONBLOCK),</span><br><span class=\"line\">\t\t\t\t  &amp;pipefifo_fops);</span><br><span class=\"line\">...</span><br><span class=\"line\">res[<span class=\"number\">0</span>]-&gt;private_data = inode-&gt;i_pipe;</span><br><span class=\"line\">res[<span class=\"number\">1</span>] = f;</span><br></pre></td></tr></table></figure>\n<p>透過以上程式碼將 <code>pipe_inode_info</code> 物件變為兩個 <code>file description</code> 的 <code>private_data</code> 成員。而這兩個 <code>file description</code> 內容大致相同(由於是透過 <code>clone</code> 複製)，差別只在於讀寫權限。由於回傳的 <code>pipefd[1]</code> 為寫端而 <code>pipefd[0]</code> 為讀端，在此可以發現最初開啟的 <code>f</code> 權限為可讀寫，而 <code>f</code> 也被存放至 <code>res[1]</code> 。而之後 <code>clone</code> 的權限則為唯讀，並被存放至 <code>res[0]</code> 。以上的行為皆與 <code>pipe man page</code> 的敘述相符。</p>\n<p>而 <code>res</code> 所指向的開啟的檔案，在回到 <code>do_pipe_flags()</code> 中後，透過</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* files 即是 res */</span></span><br><span class=\"line\">fd_install(fd[<span class=\"number\">0</span>], files[<span class=\"number\">0</span>]);</span><br><span class=\"line\">fd_install(fd[<span class=\"number\">1</span>], files[<span class=\"number\">1</span>]);</span><br></pre></td></tr></table></figure>\n<p>安插至個別的 <code>file descriptor</code> 上了。所以實際上 <code>pipe</code> 所開啟的兩個 <code>file descriptor</code> 指向的都是有相同內容的兩個 <code>file</code> 物件。如上所述，兩物件差異只在於讀寫權限。而該兩物件的 <code>private data</code> 則都指向同一 <code>pipe_inode_info</code> 物件。</p>\n<p>至此， <code>pipe</code> 的開起與其結構大致告一段落。<br>接下來將探討 <code>pipe</code> 的讀寫機制並修復原有程式的錯誤。</p>\n<p>待續。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://kkc.github.io/2020/08/22/file-descriptor/\">Linux 的 file descriptor 筆記</a><br><a href=\"https://man7.org/linux/man-pages/man2/pipe.2.html\">pipe man page</a><br><a href=\"https://elixir.bootlin.com/linux/v5.4/source/fs/pipe.c\">bootlin pipe.c</a></p>\n"},{"title":"LDM / STM 為何被移除？","date":"2020-10-25T11:43:19.000Z","_content":"## 前言\n日前在工作上實作 `arm m0` 的 `context switch` 時，使用 `STM` 指令來進行大量的暫存器到記憶體的數值保存。而在實作樹莓派的 `context switch` 時，發現參考的代碼使用 `STP` 指令。 `STP` 指令一次只能寫入兩個暫存器，因此在代碼編寫上需要大量重複。在實驗後發現 `aarch64` 並未提供 `STM` 指令，因此開始尋找背後的原因。\n\n## 原因\n在 [Cortex-A57 Software Optimization Guide\nSoftware Optimization Guide](https://developer.arm.com/documentation/uan0015/b/) 中於 `4.5 Load/Store Throughput` 提到，由於 `Cortex-A57` 處理器支援在一時間周期中同時進行讀寫的指令。換句話說，當指令為一讀取指令與一寫入指令相鄰時，以上兩條指令可以再單一 `cpu` 周期中被執行完畢，反之亦然。因此手冊中建議要將讀寫指令交插使用以提升效率。\n建議寫法如下:\n```\nLoop_start:\nSUBS r2,r2,#64\nLDRD r3,r4,[r1,#0]\nSTRD r3,r4,[r0,#0]\nLDRD r3,r4,[r1,#8]\nSTRD r3,r4,[r0,#8]\nLDRD r3,r4,[r1,#16]\nSTRD r3,r4,[r0,#16]\nLDRD r3,r4,[r1,#24]\nSTRD r3,r4,[r0,#24]\nLDRD r3,r4,[r1,#32]\nSTRD r3,r4,[r0,#32]\nLDRD r3,r4,[r1,#40]\nSTRD r3,r4,[r0,#40]\nLDRD r3,r4,[r1,#48]\nSTRD r3,r4,[r0,#48]\nLDRD r3,r4,[r1,#56]\nSTRD r3,r4,[r0,#56]\nADD r1,r1,#64\nADD r0,r0,#64\nBGT Loop_start\n```\n可以發現上面的範例程式將讀寫指令交錯放置，這樣可以大量減少記憶體存取所需的 `cpu` 周期。\n\n## 結論\n在 `aarch64` 架構下，如果要進行資料的讀寫，建議將讀/寫指令交叉放置。這樣可以藉由 `cpu` 架構上的設計來提高效率。\n而 `LDM/STM` 指令則鼓勵一次大範圍的讀或寫。這樣變無法發揮該架構下的優勢，因此這兩個指令便遭到移除。\n\n## Reference\n[你猜 为什么A64为什么没有LDM和STM指令了，而是用LDP跟STP呢？](https://www.jianshu.com/p/62ea9cfecf80)\n[Cortex-A57 Software Optimization Guide\nSoftware Optimization Guide](https://developer.arm.com/documentation/uan0015/b/)\n","source":"_posts/LDM.md","raw":"---\ntitle: LDM / STM 為何被移除？\ndate: 2020-10-25 19:43:19\ntags: aarch64\n---\n## 前言\n日前在工作上實作 `arm m0` 的 `context switch` 時，使用 `STM` 指令來進行大量的暫存器到記憶體的數值保存。而在實作樹莓派的 `context switch` 時，發現參考的代碼使用 `STP` 指令。 `STP` 指令一次只能寫入兩個暫存器，因此在代碼編寫上需要大量重複。在實驗後發現 `aarch64` 並未提供 `STM` 指令，因此開始尋找背後的原因。\n\n## 原因\n在 [Cortex-A57 Software Optimization Guide\nSoftware Optimization Guide](https://developer.arm.com/documentation/uan0015/b/) 中於 `4.5 Load/Store Throughput` 提到，由於 `Cortex-A57` 處理器支援在一時間周期中同時進行讀寫的指令。換句話說，當指令為一讀取指令與一寫入指令相鄰時，以上兩條指令可以再單一 `cpu` 周期中被執行完畢，反之亦然。因此手冊中建議要將讀寫指令交插使用以提升效率。\n建議寫法如下:\n```\nLoop_start:\nSUBS r2,r2,#64\nLDRD r3,r4,[r1,#0]\nSTRD r3,r4,[r0,#0]\nLDRD r3,r4,[r1,#8]\nSTRD r3,r4,[r0,#8]\nLDRD r3,r4,[r1,#16]\nSTRD r3,r4,[r0,#16]\nLDRD r3,r4,[r1,#24]\nSTRD r3,r4,[r0,#24]\nLDRD r3,r4,[r1,#32]\nSTRD r3,r4,[r0,#32]\nLDRD r3,r4,[r1,#40]\nSTRD r3,r4,[r0,#40]\nLDRD r3,r4,[r1,#48]\nSTRD r3,r4,[r0,#48]\nLDRD r3,r4,[r1,#56]\nSTRD r3,r4,[r0,#56]\nADD r1,r1,#64\nADD r0,r0,#64\nBGT Loop_start\n```\n可以發現上面的範例程式將讀寫指令交錯放置，這樣可以大量減少記憶體存取所需的 `cpu` 周期。\n\n## 結論\n在 `aarch64` 架構下，如果要進行資料的讀寫，建議將讀/寫指令交叉放置。這樣可以藉由 `cpu` 架構上的設計來提高效率。\n而 `LDM/STM` 指令則鼓勵一次大範圍的讀或寫。這樣變無法發揮該架構下的優勢，因此這兩個指令便遭到移除。\n\n## Reference\n[你猜 为什么A64为什么没有LDM和STM指令了，而是用LDP跟STP呢？](https://www.jianshu.com/p/62ea9cfecf80)\n[Cortex-A57 Software Optimization Guide\nSoftware Optimization Guide](https://developer.arm.com/documentation/uan0015/b/)\n","slug":"LDM","published":1,"updated":"2020-10-25T11:47:29.893Z","_id":"ckgp1phcd0000mpbe7dva75sv","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>日前在工作上實作 <code>arm m0</code> 的 <code>context switch</code> 時，使用 <code>STM</code> 指令來進行大量的暫存器到記憶體的數值保存。而在實作樹莓派的 <code>context switch</code> 時，發現參考的代碼使用 <code>STP</code> 指令。 <code>STP</code> 指令一次只能寫入兩個暫存器，因此在代碼編寫上需要大量重複。在實驗後發現 <code>aarch64</code> 並未提供 <code>STM</code> 指令，因此開始尋找背後的原因。</p>\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>在 <a href=\"https://developer.arm.com/documentation/uan0015/b/\">Cortex-A57 Software Optimization Guide<br>Software Optimization Guide</a> 中於 <code>4.5 Load/Store Throughput</code> 提到，由於 <code>Cortex-A57</code> 處理器支援在一時間周期中同時進行讀寫的指令。換句話說，當指令為一讀取指令與一寫入指令相鄰時，以上兩條指令可以再單一 <code>cpu</code> 周期中被執行完畢，反之亦然。因此手冊中建議要將讀寫指令交插使用以提升效率。<br>建議寫法如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Loop_start:</span><br><span class=\"line\">SUBS r2,r2,#64</span><br><span class=\"line\">LDRD r3,r4,[r1,#0]</span><br><span class=\"line\">STRD r3,r4,[r0,#0]</span><br><span class=\"line\">LDRD r3,r4,[r1,#8]</span><br><span class=\"line\">STRD r3,r4,[r0,#8]</span><br><span class=\"line\">LDRD r3,r4,[r1,#16]</span><br><span class=\"line\">STRD r3,r4,[r0,#16]</span><br><span class=\"line\">LDRD r3,r4,[r1,#24]</span><br><span class=\"line\">STRD r3,r4,[r0,#24]</span><br><span class=\"line\">LDRD r3,r4,[r1,#32]</span><br><span class=\"line\">STRD r3,r4,[r0,#32]</span><br><span class=\"line\">LDRD r3,r4,[r1,#40]</span><br><span class=\"line\">STRD r3,r4,[r0,#40]</span><br><span class=\"line\">LDRD r3,r4,[r1,#48]</span><br><span class=\"line\">STRD r3,r4,[r0,#48]</span><br><span class=\"line\">LDRD r3,r4,[r1,#56]</span><br><span class=\"line\">STRD r3,r4,[r0,#56]</span><br><span class=\"line\">ADD r1,r1,#64</span><br><span class=\"line\">ADD r0,r0,#64</span><br><span class=\"line\">BGT Loop_start</span><br></pre></td></tr></table></figure>\n<p>可以發現上面的範例程式將讀寫指令交錯放置，這樣可以大量減少記憶體存取所需的 <code>cpu</code> 周期。</p>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>在 <code>aarch64</code> 架構下，如果要進行資料的讀寫，建議將讀/寫指令交叉放置。這樣可以藉由 <code>cpu</code> 架構上的設計來提高效率。<br>而 <code>LDM/STM</code> 指令則鼓勵一次大範圍的讀或寫。這樣變無法發揮該架構下的優勢，因此這兩個指令便遭到移除。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://www.jianshu.com/p/62ea9cfecf80\">你猜 为什么A64为什么没有LDM和STM指令了，而是用LDP跟STP呢？</a><br><a href=\"https://developer.arm.com/documentation/uan0015/b/\">Cortex-A57 Software Optimization Guide<br>Software Optimization Guide</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>日前在工作上實作 <code>arm m0</code> 的 <code>context switch</code> 時，使用 <code>STM</code> 指令來進行大量的暫存器到記憶體的數值保存。而在實作樹莓派的 <code>context switch</code> 時，發現參考的代碼使用 <code>STP</code> 指令。 <code>STP</code> 指令一次只能寫入兩個暫存器，因此在代碼編寫上需要大量重複。在實驗後發現 <code>aarch64</code> 並未提供 <code>STM</code> 指令，因此開始尋找背後的原因。</p>\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>在 <a href=\"https://developer.arm.com/documentation/uan0015/b/\">Cortex-A57 Software Optimization Guide<br>Software Optimization Guide</a> 中於 <code>4.5 Load/Store Throughput</code> 提到，由於 <code>Cortex-A57</code> 處理器支援在一時間周期中同時進行讀寫的指令。換句話說，當指令為一讀取指令與一寫入指令相鄰時，以上兩條指令可以再單一 <code>cpu</code> 周期中被執行完畢，反之亦然。因此手冊中建議要將讀寫指令交插使用以提升效率。<br>建議寫法如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Loop_start:</span><br><span class=\"line\">SUBS r2,r2,#64</span><br><span class=\"line\">LDRD r3,r4,[r1,#0]</span><br><span class=\"line\">STRD r3,r4,[r0,#0]</span><br><span class=\"line\">LDRD r3,r4,[r1,#8]</span><br><span class=\"line\">STRD r3,r4,[r0,#8]</span><br><span class=\"line\">LDRD r3,r4,[r1,#16]</span><br><span class=\"line\">STRD r3,r4,[r0,#16]</span><br><span class=\"line\">LDRD r3,r4,[r1,#24]</span><br><span class=\"line\">STRD r3,r4,[r0,#24]</span><br><span class=\"line\">LDRD r3,r4,[r1,#32]</span><br><span class=\"line\">STRD r3,r4,[r0,#32]</span><br><span class=\"line\">LDRD r3,r4,[r1,#40]</span><br><span class=\"line\">STRD r3,r4,[r0,#40]</span><br><span class=\"line\">LDRD r3,r4,[r1,#48]</span><br><span class=\"line\">STRD r3,r4,[r0,#48]</span><br><span class=\"line\">LDRD r3,r4,[r1,#56]</span><br><span class=\"line\">STRD r3,r4,[r0,#56]</span><br><span class=\"line\">ADD r1,r1,#64</span><br><span class=\"line\">ADD r0,r0,#64</span><br><span class=\"line\">BGT Loop_start</span><br></pre></td></tr></table></figure>\n<p>可以發現上面的範例程式將讀寫指令交錯放置，這樣可以大量減少記憶體存取所需的 <code>cpu</code> 周期。</p>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>在 <code>aarch64</code> 架構下，如果要進行資料的讀寫，建議將讀/寫指令交叉放置。這樣可以藉由 <code>cpu</code> 架構上的設計來提高效率。<br>而 <code>LDM/STM</code> 指令則鼓勵一次大範圍的讀或寫。這樣變無法發揮該架構下的優勢，因此這兩個指令便遭到移除。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://www.jianshu.com/p/62ea9cfecf80\">你猜 为什么A64为什么没有LDM和STM指令了，而是用LDP跟STP呢？</a><br><a href=\"https://developer.arm.com/documentation/uan0015/b/\">Cortex-A57 Software Optimization Guide<br>Software Optimization Guide</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckgi3hjt80000esbeeoke3lg7","tag_id":"ckgi3hjtc0001esbe74hs8zls","_id":"ckgi3hjtd0002esbehiaa9n78"},{"post_id":"ckgkxty7d0000wdbe57kk3m4o","tag_id":"ckgi3hjtc0001esbe74hs8zls","_id":"ckgkxty7g0001wdbehkch794z"},{"post_id":"ckgp1phcd0000mpbe7dva75sv","tag_id":"ckgp1phcj0001mpbe3g6e4ncs","_id":"ckgp1phcl0002mpbebyed0tj4"}],"Tag":[{"name":"Linux","_id":"ckgi3hjtc0001esbe74hs8zls"},{"name":"aarch64","_id":"ckgp1phcj0001mpbe3g6e4ncs"}]}}